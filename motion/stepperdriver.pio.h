// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------- //
// stepperdriver //
// ------------- //

#define stepperdriver_wrap_target 0
#define stepperdriver_wrap 9

static const uint16_t stepperdriver_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0xa027, //  1: mov    x, osr                     
    0xe040, //  2: set    y, 0                       
    0xa0e2, //  3: mov    osr, y                     
    0xa0c2, //  4: mov    isr, y                     
    0xe003, //  5: set    pins, 3                    
    0xa0c1, //  6: mov    isr, x                     
    0xe000, //  7: set    pins, 0                    
    0x0045, //  8: jmp    x--, 5                     
    0x0000, //  9: jmp    0                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program stepperdriver_program = {
    .instructions = stepperdriver_program_instructions,
    .length = 10,
    .origin = -1,
};

static inline pio_sm_config stepperdriver_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + stepperdriver_wrap_target, offset + stepperdriver_wrap);
    return c;
}

bool first_time = true;
static inline pio_sm_config stepperdriver_program_init(PIO pio, uint stateMachine, uint offset, uint base_pin, float clk_div) {
    //get the default config
    pio_sm_config stateMachineConfig = stepperdriver_program_get_default_config(offset);
    //define the step pins in config as well
	sm_config_set_out_pins(&stateMachineConfig, base_pin, 2);
    //no one has a stepper driver that can be driven above 100MHz, so we need to decraase the running frequency
    sm_config_set_clkdiv(&stateMachineConfig, clk_div);
    //out shift register configs, shift to rigth true, autopull true, number of bits to shift 32
    sm_config_set_out_shift(&stateMachineConfig, true, false, 32);
    sm_config_set_in_shift(&stateMachineConfig, true, false, 32);
    //initialize the spescific pio and the initial base pin to drive
    pio_gpio_init(pio, base_pin); //GP20
    pio_gpio_init(pio, (base_pin + 1) ); //GP21
	//two different stepper drivers "step" pins needed to be driven together.
	//base pin is GP20 for stepperdriver1 and the GP21 is for stepperdriver2, thus 2 pins as parameter
    pio_sm_set_consecutive_pindirs(pio, stateMachine, base_pin, 2, true);
    pio_sm_set_set_pins(pio, stateMachine, base_pin, 2);
    sm_config_set_set_pins(&stateMachineConfig, base_pin, 2);
    //pio_sm_init(pio, stateMachine, offset, &stateMachineConfig);
    return stateMachineConfig;
}

#endif

